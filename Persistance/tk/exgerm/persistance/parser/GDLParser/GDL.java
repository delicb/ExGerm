/* Generated By:JavaCC: Do not edit this line. GDL.java */
package tk.exgerm.persistance.parser.GDLParser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import tk.exgerm.persistance.parser.Parser;
import tk.exgerm.persistance.parser.InternalParseException;

import tk.exgerm.core.service.ICoreContext;
import tk.exgerm.core.model.IGraph;
import tk.exgerm.core.model.INode;
import tk.exgerm.core.model.IEdge;
import tk.exgerm.core.exception.ExGNodeAlreadyExsistException;
import tk.exgerm.core.exception.ExGNameConflictException;

/**
 * Na osnovi zadatog GDL jezika parsira dati file.
 *
 */
@SuppressWarnings("all")
public class GDL implements Parser, GDLConstants {
        ICoreContext context;
        List<Object> activeObjects;
        Stack<IGraph> graphStack;
        INode nodeToConnect;
        String graphName;

        public GDL(ICoreContext context, File f, String graphName) throws FileNotFoundException {
                this(context, f);
                this.graphName = graphName;
        }

        public GDL(ICoreContext context, File f) throws FileNotFoundException {
                this(new FileInputStream(f));
                this.context = context;
                graphStack = new Stack<IGraph>();
                activeObjects = new ArrayList<Object>();
        }

        public IGraph parse() throws InternalParseException {
                try
                {
                        graph();
                }
                catch (ParseException e)
                {
                        throw new InternalParseException(e.getMessage());
                }
                if (graphStack.size() != 1) {
                        throw new InternalParseException("Unknown error occured!");
                }
                return graphStack.pop();
        }

        public void createGraph(String name, int kind) throws ParseException {
                String newName = null;
                String n = null;
                if (kind == GDLConstants.STRING_LITERAL)
                        n = sanitizeString(name);
                else
                        n = name;

                // samo za TLG (top level graph :) ) provaravamo da li mu treba promeniti ime
                if (graphStack.size() == 0) {
                        newName = (graphName != null ? graphName : n);
                        if (context.getGraph(newName) != null)
                                throw new ParseException("Graph " + newName + " already exists in register.");
                }
                else
                        newName = n;

                IGraph g = context.newGraph(newName);
                graphStack.push(g);
                activeObjects.add(g);
        }

        public void createNode(String name, int kind) throws ParseException {
                String nodeName = null;
                if (kind == GDLConstants.STRING_LITERAL)
                        nodeName = sanitizeString(name);
                else
                        nodeName = name;
                INode n = context.newNode(nodeName);
                try {
                        graphStack.peek().addNode(n);
                        activeObjects.add(n);
                }
                catch (ExGNodeAlreadyExsistException e) {
                        throw new ParseException("Node " + name + " allready defined");
                }
        }

        public void graphEnded() {
                // ovo radimo samo ako nismo dosli do kraja sa vracanjem ugnjezdenih grafova
                if (graphStack.size() > 1) {
                        IGraph g = graphStack.pop();
                        try {
                                graphStack.peek().addNode(g);
                        }
                        catch (ExGNodeAlreadyExsistException e) {
                                System.err.println(e.getMessage());
                        }
                }
        }

        public void setNodeToConnect(String node, int kind) throws ParseException {
                String nodeName = null;
                if (kind ==  GDLConstants.STRING_LITERAL)
                        nodeName = sanitizeString(node);
                else
                        nodeName = node;
                IGraph g = graphStack.peek();
                INode n = g.getNode(nodeName);
                if (n == null) {
                        throw new ParseException("Node " + node + " is undefined");
                }
                else {
                        nodeToConnect = n;
                }
        }

        public void invalidateNodeToConnect() {
                nodeToConnect = null;
        }

        public void invalidateActiveObjects()
        {
                activeObjects.clear();
        }

        public void connectToPreviousNode(String node, int kind, int direction) throws ParseException {
                String nodeName = null;
                if (kind == GDLConstants.STRING_LITERAL)
                        nodeName = sanitizeString(node);
                else
                        nodeName = node;
                IGraph g = graphStack.peek();
                INode n = g.getNode(nodeName);
                if (n == null)
                        throw new ParseException("Node " + node + " is undefined");

                boolean directed;
                if (direction == GDLConstants.UNDIRECTED)
                        directed = false;
                else
                        directed = true;

                IEdge e = null;
                if (!directed) {
                        e = context.newEdge(nodeToConnect, n);
                }
                else {
                        if (direction == GDLConstants.LEFT) {
                                e = context.newEdge(n, nodeToConnect);
                                e.setDirected(true);
                        }

                        if (direction == GDLConstants.RIGHT) {
                                e = context.newEdge(nodeToConnect, n);
                                e.setDirected(true);
                        }
                }
                g.addEdge(e);
                activeObjects.add(e);
        }

        public void setAttribute(String key, int keyKind, String value, int valueKind) {
                String k = null;
                if (keyKind == GDLConstants.STRING_LITERAL)
                        k = sanitizeString(key);
                else
                        k = key;
                Object v = null;

                switch (valueKind) {
                        case GDLConstants.ID:
                                v = value;
                                break;
                        case GDLConstants.INTEGER_LITERAL:
                                v = Integer.parseInt(value);
                                break;
                        case GDLConstants.FLOATING_POINT_LITERAL:
                                v = Float.parseFloat(value);
                                break;
                        case GDLConstants.STRING_LITERAL:
                                v = sanitizeString(value);
                                break;
                        default:
                                break;
                }
                if (v != null)
                        setAttributeToActiveObject(k, v);
        }

        public void setAttributeToActiveObject(String key, Object value) {
          for (Object activeObject: activeObjects) {
                        if (activeObject instanceof IGraph) {
                                ((IGraph)activeObject).setAttribute(key, value);
                                continue;
                        }
                        if (activeObject instanceof INode) {
                                ((INode)activeObject).setAttribute(key, value);
                                continue;
                        }
                        if (activeObject instanceof IEdge) {
                                ((IEdge)activeObject).setAttribute(key, value);
                                continue;
                        }
                }
        }

        /**
	* Izbacuje sve sto nije validno slovo
	*/
        public String sanitizeString(String s) {
                String rez = s;
                // uklanjanje navodnika na pocetku
                rez = rez.replaceFirst("^\"", "");

                // uklanjanje navodnika na kraju                rez = rez.replaceFirst("\"$", "");

                // uklanjanje escape znaka izpred navodnika u sred stringa		
                rez = rez.replaceAll("\\\\\"", "\"");

                // sve ostalo dopustamo                return rez;
        }

  final public void graph() throws ParseException {
               invalidateActiveObjects();
    jj_consume_token(GRAPH);
                 createGraph(getToken(1).image, getToken(1).kind);
    id();
    jj_consume_token(LBRACE);
    stmt_list();
    jj_consume_token(RBRACE);
                                                                                                        graphEnded();
  }

  final public void id() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void stmt_list() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
      case NODE:
      case EDGE:
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      stmt();
    }
  }

  final public void stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
      graph();
      break;
    case LBRACKET:
      attr_list();
      break;
    case NODE:
      node_stmt();
      break;
    case EDGE:
      edge_stmt();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void attr_list() throws ParseException {
    jj_consume_token(LBRACKET);
    attr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      attr();
    }
    jj_consume_token(RBRACKET);
  }

  final public void attr() throws ParseException {
                setAttribute(getToken(1).image, getToken(1).kind, getToken(3).image, getToken(3).kind);
    id();
    jj_consume_token(EQ);
    value();
  }

  final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void node_stmt() throws ParseException {
                   invalidateActiveObjects();
    jj_consume_token(NODE);
    id();
                     createNode(getToken(0).image, getToken(0).kind);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      jj_consume_token(NODE);
      id();
                createNode(getToken(0).image, getToken(0).kind);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      attr_list();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void edge_stmt() throws ParseException {
                   invalidateActiveObjects();
    jj_consume_token(EDGE);
    id();
                setNodeToConnect(getToken(0).image, getToken(0).kind);
                connectToPreviousNode(getToken(2).image, getToken(2).kind, getToken(1).kind);
    connection_direction();
    id();
                setNodeToConnect(getToken(0).image, getToken(0).kind);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNDIRECTED:
      case RIGHT:
      case LEFT:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
                        connectToPreviousNode(getToken(2).image, getToken(2).kind, getToken(1).kind);
      connection_direction();
      id();
                        setNodeToConnect(getToken(0).image, getToken(0).kind);
    }
                invalidateNodeToConnect();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      attr_list();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void connection_direction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNDIRECTED:
      jj_consume_token(UNDIRECTED);
      break;
    case LEFT:
      jj_consume_token(LEFT);
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public GDLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x102000,0x4001c00,0x4001c00,0x40000000,0x1a2000,0x40000000,0x4000000,0xe00000,0x4000000,0xe00000,};
   }

  /** Constructor with InputStream. */
  public GDL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GDL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GDLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GDL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GDLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GDL(GDLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GDLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
